// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1701.robot16Navigation.subsystems;

import org.usfirst.frc1701.robot16Navigation.RobotMap;
import org.usfirst.frc1701.robot16Navigation.commands.*;
import edu.wpi.first.wpilibj.AnalogAccelerometer;
import edu.wpi.first.wpilibj.AnalogGyro;

import edu.wpi.first.wpilibj.command.Subsystem;


/**
 * Acts as an individual subsystem to directly
 * handle navigation related hardware.
 * 
 * @author Matt Watrous
 */

public class Navigation extends Subsystem {
	private double robotHeading; //Will store robot heading in degrees, should start at zero (gyro resets in NavMonitors initialize()

	/*
	 * These 2 instruments will comprise the first
	 * of two independent systems to determine the
	 * robot's location, the results of which will 
	 * be averaged and provide the final number
	 */
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final AnalogGyro gyro = RobotMap.navigationGyro; //Navigation gyro
    private final AnalogAccelerometer accelerometer = RobotMap.navigationAccelerometer; //Navigation accelerometer
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    /*
     * The stub below holds the place of drive
     * train encoders which will comprise the 
     * second system for determining location.
     * Alternatively, they may reference the 
     * drive train object's encoders (rather
     * than have access to its own specific 
     * ones)
     */
    
    //TODO Determine source of drive train encoders
    
    private final double timePerSample = .005; //Used to integrate the distance traveled along with runCounter
    private int runCounter = 0; //Counts the current number of executions
    private double presentAcceleration = 0; //Acceleration in (m/s^2)
    
    
    /*
     * Begin Methods
     */ 
    
    /**
     * Continuously sets the value for gyro
     * heading and acceleration (m/s^2)
     */
    public void setNavValues(){
    	robotHeading = gyro.getAngle();
    	presentAcceleration = accelerometer.getAcceleration() * 9.81; //May need to verify proper conversion TODO
    }
    /**
     * @return (String) - Present robot heading, Present Acceleration
     */
    public String getNavValues(){
		return Double.toString(robotHeading) + ", " + Double.toString(presentAcceleration);
    }
    
    /**
     * @return (double) - Robot's total time active
     */
    public double setTimeCountValues(){
    	runCounter++;
    	return (double) (runCounter * timePerSample); //Returns total time robot has been active for
    }
    
    public void initDefaultCommand() {
    	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new NavigationMonitor());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}}

