// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1701.robot16Navigation.commands;

import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc1701.robot16Navigation.Robot;
import org.usfirst.frc1701.robot16Navigation.RobotMap;

/**
 *Handles the continuous reading of values
 *from Navigation's hardware. Also, will 
 *control drive train to navigate to a particular
 *location on the field
 *
 *@author Matt Watrous
 */

public class NavigationMonitor extends Command {
	//Default constructor for just reading values
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
	public NavigationMonitor() {

	    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
	        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

	        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
	        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	        requires(Robot.navigation);

	    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	    }
    //Constructor for navigating to coordinates
    public NavigationMonitor(int x, int y){
    	requires(Robot.navigation);
    	//TODO Create a means of interfacing with Drive and DriveTrain
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	RobotMap.navigationGyro.reset(); //Resets the gyro for the first use
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	System.out.println("Robot run time: " + Robot.navigation.setTimeCountValues());
    	Robot.navigation.setNavValues();
    	System.out.println("Robot heading, acceleration: " + Robot.navigation.getNavValues());
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
